@page "/currencyrates"
@inject ICurrencyService currencyService
@inject IExcelExportService excelService
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService

<h3>Курсы валют</h3>

<div class="mb-3">
    <RadzenButton Icon="file_download" Text="Экспорт в Excel" Click="@ExportAllCurrencyRatesToExcel" />
    <RadzenButton Text="@(_isLoading ? "Loading..." : "Refresh Now")"
                  Icon="refresh"
                  Disabled="@_isLoading"
                  Click="@RefreshManually"
                  ButtonStyle="ButtonStyle.Primary"
                  Class="ms-2" />

    @if (_isLoading)
    {
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" Class="ms-2" />
    }

    @if (!string.IsNullOrEmpty(currencyRates.TimeLastUpdateUtc))
    {
        <span class="ms-3 text-muted">Last updated: @currencyRates.TimeLastUpdateUtc</span>
    }

    <RadzenButton Text="Просмотр информации"
                  Click="@ShowCurrencyDetails"
                  Icon="info"
                  ButtonStyle="ButtonStyle.Info"
                  Class="ms-3"
                  Disabled="@(_isLoading || selectedCurrencyRate == null)" />
</div>

<RadzenDataGrid @ref="dataGrid"
                Data="@currencyRates.CurrencyRatesList"
                TItem="CurrencyRateDetail"
                AllowPaging="true"
                PageSize="20"
                AllowRowSelectOnRowClick="true"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value="@selectedItems"
                RowSelect="@OnRowSelect"
                RowRender="@OnRowRender">
    <Columns>
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="Id" Title="ID" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="CurrencyCode" Title="Код валюты" Width="120px" />
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="CurrencyName" Title="Название валюты" />
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="Rate" Title="Курс" FormatString="{0:N4}" Width="150px" TextAlign="TextAlign.Right" />
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="Date" Title="Дата" FormatString="{0:d}" Width="150px" TextAlign="TextAlign.Center" />
    </Columns>
</RadzenDataGrid>

@code {
    private CurrencyRatesResponse currencyRates = new CurrencyRatesResponse();
    private Timer? timer;
    private bool _isLoading = false;
    private CurrencyRateDetail? selectedCurrencyRate;
    private IList<CurrencyRateDetail> selectedItems = new List<CurrencyRateDetail>();
    private RadzenDataGrid<CurrencyRateDetail>? dataGrid;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrencyRates();
        StartTimer();
    }

    private void StartTimer()
    {
        timer = new Timer(async _ => await TimerCallback(), null, TimeSpan.FromMinutes(10), TimeSpan.FromMinutes(10));
    }

    private void OnRowRender(RowRenderEventArgs<CurrencyRateDetail> args)
    {
        if (selectedCurrencyRate != null && args.Data.Id == selectedCurrencyRate.Id)
        {

            args.Attributes["class"] = "rz-state-highlight rz-data-row ";
        }
        else
        {
            args.Attributes["class"] = "rz-data-row ";
        }
    }

    private void OnRowSelect(CurrencyRateDetail item)
    {
        selectedCurrencyRate = item; 
        StateHasChanged();
    }

    private async Task TimerCallback()
    {
        if (!_isLoading)
        {
            await InvokeAsync(async () =>
            {
                await LoadCurrencyRates();
                StateHasChanged();
            });
        }
    }

    private async Task LoadCurrencyRates()
    {
        try
        {
            _isLoading = true;
            currencyRates = await currencyService.GetCurrencyRatesAsync();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a notification
            Console.WriteLine($"Error loading currency rates: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task RefreshManually()
    {
        await LoadCurrencyRates();
    }

    private async Task ExportAllCurrencyRatesToExcel()
    {
        if (currencyRates?.CurrencyRatesList != null)
        {
            try
            {
                var excelBytes = await excelService.ExportCurrencyRatesToExcelAsync(
                    currencyRates.CurrencyRatesList,
                    "AllCurrencyRates.xlsx"
                );
                string base64String = Convert.ToBase64String(excelBytes);
                await JSRuntime.InvokeVoidAsync("saveAsFile", "AllCurrencyRates.xlsx", base64String);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting to Excel: {ex.Message}");
                // Consider showing a user-friendly error message
            }
        }
    }

    private async Task ShowCurrencyDetails()
    {
        if (selectedCurrencyRate == null)
        {
            // Optional: Show a notification that no row is selected
            return;
        }

        var parameters = new Dictionary<string, object>()
        {
            { "CurrencyRate", selectedCurrencyRate }
        };

        await DialogService.OpenAsync<CurrencyRateDetailsDialog>(
            "Детали валюты",
            parameters,
            new DialogOptions()
                {
                    Width = "450px",
                    Height = "300px",
                    Resizable = true,
                    Draggable = true
                });
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}