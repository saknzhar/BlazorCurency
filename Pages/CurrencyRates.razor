@page "/currencyrates"
@inject ICurrencyService _currencyService 
@inject IExcelExportService _excelService
@inject IJSRuntime JSRuntime
<h3>Курсы валют</h3>

<div>
    <RadzenButton Icon="file_download" Text="Экспорт в Excel" Click="@ExportAllCurrencyRatesToExcel" />
        <RadzenButton Text="@(_isLoading ? "Loading..." : "Refresh Now")"
                      Icon="refresh"
                      Disabled="@_isLoading"
                      Click="@RefreshManually"
                      ButtonStyle="ButtonStyle.Primary" />

        @if (_isLoading)
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
        }

        @if (currencyRates.TimeLastUpdateUtc != string.Empty)
        {
            <span class="ms-3 text-muted">Last updated: @currencyRates.TimeLastUpdateUtc</span>
        }
    

</div>
<RadzenDataGrid Data="@currencyRates.CurrencyRatesList" TItem="CurrencyRateDetail" AllowPaging="true" PageSize="20" AllowSorting="true" AllowFiltering="true">
    <Columns>
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="Id" Title="ID" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="CurrencyCode" Title="Код валюты" Width="120px" />
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="CurrencyName" Title="Название валюты" />
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="Rate" Title="Курс" FormatString="{0:N4}" Width="150px" TextAlign="TextAlign.Right" />
        <RadzenDataGridColumn TItem="CurrencyRateDetail" Property="Date" Title="Дата" FormatString="{0:d}" Width="150px" TextAlign="TextAlign.Center" />
    </Columns>
</RadzenDataGrid>


@code {
    private CurrencyRatesResponse currencyRates = new CurrencyRatesResponse();
    private Timer? _timer;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrencyRates();
        StartTimer();
    }
    private void StartTimer()
    {
        _timer = new Timer(async _ => await TimerCallback(), null, TimeSpan.FromMinutes(10), TimeSpan.FromMinutes(10));
    }
    private async Task TimerCallback()
    {
        if (!_isLoading)
        {
            await InvokeAsync(async () =>
            {
                await LoadCurrencyRates();
                StateHasChanged(); // Refresh the UI
            });
        }
    }
    private async Task LoadCurrencyRates()
    {
        try
        {
            _isLoading = true;
            currencyRates = await _currencyService.GetCurrencyRatesAsync();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a notification
            Console.WriteLine($"Error loading currency rates: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
    private async Task RefreshManually()
    {
        await LoadCurrencyRates();
    }

    private async Task ExportAllCurrencyRatesToExcel()
    {
        if (currencyRates?.CurrencyRatesList != null)
        {
            // 1. Generate the Excel file as a byte array using your service
            var excelBytes = await _excelService.ExportCurrencyRatesToExcelAsync(
                currencyRates.CurrencyRatesList,
                "AllCurrencyRates.xlsx" 
            );

            string base64String = Convert.ToBase64String(excelBytes);

            await JSRuntime.InvokeVoidAsync("saveAsFile", "AllCurrencyRates.xlsx", base64String);
        }
    }
}