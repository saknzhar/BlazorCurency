@page "/currencyrates"
@inject ICurrencyService _currencyService 
<h3>Курсы валют</h3>

<RadzenButton Text="Обновить курсы" Click="@LoadCurrencyRates" Icon="refresh" />
<RadzenButton Text="Добавить новый" Click="@(() => AddNewCurrency())" Icon="add_circle" ButtonStyle="ButtonStyle.Success" Class="ms-3" />

<RadzenDataGrid Data="@currencyRates" TItem="CurrencyRate" AllowPaging="true" PageSize="5" AllowSorting="true" AllowFiltering="true">
    <Columns>
        <RadzenDataGridColumn TItem="CurrencyRate" Property="Id" Title="ID" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="CurrencyRate" Property="CurrencyCode" Title="Код валюты" Width="120px" />
        <RadzenDataGridColumn TItem="CurrencyRate" Property="CurrencyName" Title="Название валюты" />
        <RadzenDataGridColumn TItem="CurrencyRate" Property="Rate" Title="Курс" FormatString="{0:N4}" Width="150px" TextAlign="TextAlign.Right" />
        <RadzenDataGridColumn TItem="CurrencyRate" Property="Date" Title="Дата" FormatString="{0:d}" Width="150px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="CurrencyRate">
            <Template Context="currencyRate">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Click="@(() => EditCurrency(currencyRate))" />
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Class="ms-2" Click="@(() => DeleteCurrency(currencyRate))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private List<CurrencyRate> currencyRates = new List<CurrencyRate>();

    // Вместо OnInitialized используем OnInitializedAsync для асинхронных операций
    protected override async Task OnInitializedAsync()
    {
        await LoadCurrencyRates();
    }

    private async Task LoadCurrencyRates()
    {
        currencyRates = await _currencyService.GetCurrencyRatesAsync();
        // StateHasChanged(); // Обычно не требуется после await, но может быть полезно для отладки или сложных сценариев
    }

    private async Task AddNewCurrency()
    {
        // Пример добавления нового курса (для демонстрации)
        // В реальном приложении, возможно, будет использоваться модальное окно для ввода данных
        var newRate = new CurrencyRate
        {
            CurrencyCode = "AUD",
            CurrencyName = "Австралийский доллар",
            Rate = 60.00m,
            Date = DateTime.Now
        };
        await _currencyService.AddCurrencyRateAsync(newRate);
        await LoadCurrencyRates(); // Перезагружаем данные для обновления грида
    }

    private async Task EditCurrency(CurrencyRate currencyRate)
    {
        // Пример редактирования (для демонстрации)
        // В реальном приложении, возможно, будет использоваться модальное окно для редактирования
        currencyRate.Rate += 0.01m; // Просто изменяем курс для примера
        await _currencyService.UpdateCurrencyRateAsync(currencyRate);
        await LoadCurrencyRates(); // Перезагружаем данные для обновления грида
        Console.WriteLine($"Отредактирован курс: {currencyRate.CurrencyName}, новый курс: {currencyRate.Rate}");
    }

    private async Task DeleteCurrency(CurrencyRate currencyRate)
    {
        // В реальном приложении здесь может быть запрос подтверждения
        await _currencyService.DeleteCurrencyRateAsync(currencyRate.Id);
        await LoadCurrencyRates(); // Перезагружаем данные для обновления грида
        Console.WriteLine($"Удален курс: {currencyRate.CurrencyName}");
    }
}